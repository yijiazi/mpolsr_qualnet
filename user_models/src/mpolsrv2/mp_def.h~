/*
 *
 * Copyright (c) 2006, Graduate School of Niigata University,
 *                                         Ad hoc Network Lab.
 * Developer:
 *  Yasunori Owada  [yowada@net.ie.niigata-u.ac.jp],
 *  Kenta Tsuchida  [ktsuchi@net.ie.niigata-u.ac.jp],
 *  Taka Maeno      [tmaeno@net.ie.niigata-u.ac.jp],
 *  Hiroei Imai     [imai@ie.niigata-u.ac.jp].
 * Contributor:
 *  Keita Yamaguchi [kyama@net.ie.niigata-u.ac.jp],
 *  Yuichi Murakami [ymura@net.ie.niigata-u.ac.jp],
 *  Hiraku Okada    [hiraku@ie.niigata-u.ac.jp].
 *
 * This software is available with usual "research" terms
 * with the aim of retain credits of the software.
 * Permission to use, copy, modify and distribute this software for any
 * purpose and without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies,
 * and the name of NIIGATA, or any contributor not be used in advertising
 * or publicity pertaining to this material without the prior explicit
 * permission. The software is provided "as is" without any
 * warranties, support or liabilities of any kind.
 * This product includes software developed by the University of
 * California, Berkeley and its contributors protected by copyrights.
 */
#ifndef __MPOLSR_DEF__
#define __MPOLSR_DEF__


#define DEFAULT_PARAM 0

#define POLLING_RATE 50

/* Common includes */
//WIN FIX Start
//#include <sys/time.h>
//#include <sys/times.h>
//#include <sys/socket.h>

#if defined (WIN32) || defined (_WIN32) || defined (__WIN64)
#include <sys/timeb.h>
#include <winsock2.h>
//#define random() rand()

#else
#include <sys/time.h>
#include <sys/times.h>
#include <sys/socket.h>
#include <unistd.h>

#endif


#include <stdio.h>
//#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "mp_olsr_debug.h"
#include "mp_olsr_protocol.h"

namespace MPOLSRv2{  


#define DEBUG_OLSRV2 0

#define IP_ADDR union olsr_ip_addr
#define IP_TO_STRING olsr_niigata_ip_to_string


#define VERSION "0.0.1"
#define SOFTWARE_VERSION "olsr.org - " VERSION
#define OLSRD_VERSION_DATE "       *** " SOFTWARE_VERSION " (" __DATE__ ") ***\n"

#define OLSRD_CONF_FILE_NAME "olsrd.conf"
//#define OLSRD_GLOBAL_CONF_FILE "/etc/" OLSRD_CONF_FILE_NAME
#define OLSRD_GLOBAL_CONF_FILE "/etc/olsrd.conf"


#define HOPCNT_MAX      32  /* maximum hops number */
#define MAXMESSAGESIZE      1500    /* max broadcast size */
#define UDP_IPV4_HDRSIZE        28
#define UDP_IPV6_HDRSIZE        48
#define MAX_IFS                 16


/* Provides a timestamp s1 milliseconds in the future
   according to system ticks returned by times(2) */
#define GET_TIMESTAMP(s1) \
        now_times + ((s1) / system_tick_divider)

#define TIMED_OUT(s1) \
        ((int)((s1) - now_times) < 0)


/*
 * Queueing macros
 */

/* First "argument" is NOT a pointer! */

#define QUEUE_ELEM(pre, new) \
        pre.next->prev = new; \
        new->next = pre.next; \
        new->prev = &pre; \
        pre.next = new

#define DEQUEUE_ELEM(elem) \
    elem->prev->next = elem->next; \
    elem->next->prev = elem->prev


/*
 * Global olsrd configuragtion
 */

//externstruct olsrd_config *olsr_cnf;

/* Global tick resolution */
extern olsr_u16_t system_tick_divider;

extern int exit_value; /* Global return value for process termination */


/* Timer data */
extern clock_t now_times;              /* current idea of times(2) reported uptime */
//struct timeval now;       /* current idea of time */
//struct tm *nowtm;     /* current idea of time (in tm) */

extern olsr_bool disp_pack_in;         /* display incoming packet content? */
extern olsr_bool disp_pack_out;        /* display outgoing packet content? */

extern olsr_bool del_gws;

/*
 * Timer values
 */

extern float will_int;
extern float max_jitter;

//extern size_t ipsize;

/* OLSR UPD port */
extern int olsr_udp_port;

/* The socket used for all ioctls */
extern int ioctl_s;

/* routing socket */
#if defined __FreeBSD__ || defined __MacOSX__ || defined __NetBSD__
extern int rts;
#endif

extern float max_tc_vtime;

extern clock_t fwdtimer[MAX_IFS];   /* forwarding timer */

extern int minsize;

//extern olsr_bool changes;                /* is set if changes occur in MPRS set */

/* TC empty message sending */
//extern clock_t send_empty_tc;
}


#endif

